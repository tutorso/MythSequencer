```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Turning Torso - Myth Sequencer</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      overflow: hidden;
      background: black;
    }
    canvas {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 0;
      cursor: pointer; /* Add pointer cursor to indicate interactivity */
    }
    button {
      position: absolute;
      top: 20px;
      padding: 6px 12px; /* Reduced padding by 40% */
      font-size: 9.6px; /* Reduced font size by 40% */
      cursor: pointer;
      z-index: 10;
      background: black;
      border: none;
      border-radius: 5px;
      font-family: 'Helvetica', sans-serif;
      color: hsla(0, 100%, 70%, 1); /* Initial text color matching gradient */
    }
    #start {
      left: 20px;
    }
    #stop {
      left: 102px; /* Adjusted position due to smaller size */
    }
    #phrase {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: black;
      font-size: 40.8px; /* Increased font size by 170% (24px * 1.7) */
      font-weight: bold;
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
      text-align: center;
      width: 80%;
      z-index: 10;
      pointer-events: none; /* Ensure the text doesn't interfere with interactions */
      font-family: 'Helvetica', sans-serif;
      text-transform: uppercase;
    }
  </style>
</head>
<body>
  <canvas id="gradientCanvas"></canvas>
  <button id="start">Start</button>
  <button id="stop">Stop</button>
  <div id="phrase"></div>
  <script>
    const canvas = document.getElementById('gradientCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    let time = 0;

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    window.addEventListener('resize', resizeCanvas);

    // Audio-reactive gradient variables
    let audioReactiveOffset = 0;

    function drawGradient(audioReactive = false) {
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const radius = Math.min(canvas.width, canvas.height) * 0.45;
      const gradient = ctx.createRadialGradient(
        centerX + Math.sin(time * 0.001) * 100,
        centerY + Math.cos(time * 0.0015) * 100,
        0,
        centerX,
        centerY,
        radius
      );

      // Modify gradient based on audio-reactive offset
      gradient.addColorStop(0, `hsla(${(time * 0.01 + audioReactiveOffset) % 360}, 100%, 70%, 1)`);
      gradient.addColorStop(0.5, `hsla(${(time * 0.02 + audioReactiveOffset) % 360}, 100%, 50%, 0.8)`);
      gradient.addColorStop(1, `hsla(${(time * 0.03 + audioReactiveOffset) % 360}, 100%, 30%, 0)`);

      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Update button colors to match gradient
      const buttons = document.querySelectorAll('button');
      buttons.forEach(button => {
        button.style.color = `hsla(${(time * 0.01 + audioReactiveOffset) % 360}, 100%, 70%, 1)`;
      });

      // Calculate inverse color for shadow
      const hue = (time * 0.01 + audioReactiveOffset) % 360;
      const inverseHue = (hue + 180) % 360;
      const shadowColor = `hsla(${inverseHue}, 100%, 70%, 1)`;

      // Apply shadow to phrase
      const phraseElement = document.getElementById('phrase');
      phraseElement.style.textShadow = `2px 2px 5px ${shadowColor}`;
    }

    function animateGradient() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawGradient();
      time += 10;
      requestAnimationFrame(animateGradient);
    }

    animateGradient();

    const AudioContext = window.AudioContext || window.webkitAudioContext;
    const audioCtx = new AudioContext();

    // Gain node to control volume
    const gainNode = audioCtx.createGain();
    gainNode.gain.value = 0.7; // Set volume to 70%

    // Delay effect
    const delay = audioCtx.createDelay();
    delay.delayTime.value = 0.3; // Initial delay time in seconds

    // Feedback loop for delay
    const feedback = audioCtx.createGain();
    feedback.gain.value = 0.5; // Moderate feedback level
    delay.connect(feedback);
    feedback.connect(delay);

    // Tiny reverb using a ConvolverNode
    const reverb = audioCtx.createConvolver();
    const reverbBuffer = audioCtx.createBuffer(2, audioCtx.sampleRate * 0.5, audioCtx.sampleRate); // Shorter reverb time
    const leftChannel = reverbBuffer.getChannelData(0);
    const rightChannel = reverbBuffer.getChannelData(1);

    for (let i = 0; i < leftChannel.length; i++) {
      leftChannel[i] = (Math.random() * 2 - 1) * 0.3; // Reduced intensity for tiny reverb
      rightChannel[i] = (Math.random() * 2 - 1) * 0.3;
    }

    reverb.buffer = reverbBuffer;

    // Phaser effect
    const phaser = audioCtx.createStereoPanner();
    const lfo = audioCtx.createOscillator();
    const lfoGain = audioCtx.createGain();
    lfo.type = 'sine';
    lfo.frequency.value = 0.5; // Slow LFO frequency
    lfoGain.gain.value = 0.5; // Modulation depth
    lfo.connect(lfoGain);
    lfoGain.connect(phaser.pan);
    lfo.start();

    // Compressor to prevent clipping
    const compressor = audioCtx.createDynamicsCompressor();
    compressor.threshold.value = -12; // Threshold for compression
    compressor.knee.value = 10; // Soft knee
    compressor.ratio.value = 12; // High ratio for limiting
    compressor.attack.value = 0.003; // Fast attack
    compressor.release.value = 0.25; // Moderate release

    // Connect nodes: Gain -> Phaser -> Delay/Reverb -> Compressor -> Destination
    gainNode.connect(phaser);
    phaser.connect(delay);
    phaser.connect(reverb); // Send signal to reverb
    delay.connect(compressor); // Delay output to compressor
    reverb.connect(compressor); // Reverb output to compressor
    compressor.connect(audioCtx.destination);

    // Drum-specific effects
    const drumCompressor = audioCtx.createDynamicsCompressor();
    drumCompressor.threshold.value = -10; // More aggressive threshold
    drumCompressor.ratio.value = 8; // Stronger compression

    const limiter = audioCtx.createDynamicsCompressor();
    limiter.threshold.value = -1; // Hard limit to prevent clipping
    limiter.ratio.value = 20; // High ratio for limiting
    limiter.attack.value = 0.001; // Very fast attack
    limiter.release.value = 0.05; // Fast release

    const drumDelay = audioCtx.createDelay();
    drumDelay.delayTime.value = 0.1; // Fast delay for drums

    const drumFeedback = audioCtx.createGain();
    drumFeedback.gain.value = 0.4; // Moderate feedback
    drumDelay.connect(drumFeedback);
    drumFeedback.connect(drumDelay);

    const distortion = audioCtx.createWaveShaper();
    const distortionCurve = new Float32Array(65536);

    for (let i = 0; i < distortionCurve.length; i++) {
      const x = (i / 65536) * 2 - 1;
      distortionCurve[i] = Math.tanh(x * 5); // Soft distortion curve
    }

    distortion.curve = distortionCurve;

    // Connect drum effects chain
    drumDelay.connect(distortion);
    distortion.connect(drumCompressor);
    drumCompressor.connect(limiter);
    limiter.connect(audioCtx.destination);

    // Euclidean sequencer function
    function euclideanSequence(steps, beats) {
      let sequence = Array(steps).fill(0);
      let bucket = 0;

      for (let i = 0; i < steps; i++) {
        bucket += beats;

        if (bucket >= steps) {
          sequence[i] = 1;
          bucket -= steps;
        }
      }

      return sequence;
    }

    // Generate random jazzy chord frequencies across 2 octaves down
    function generateJazzyChord(rootFreq) {
      const octaveOffset = Math.floor(Math.random() * 4) - 2; // Random octave offset, transposed down by 2 octaves
      const useMaj7 = Math.random() < 0.5; // Randomly alternate between minor 9 and maj7 chords

      if (useMaj7) {
        const ratios = [1, 5 / 4, 3 / 2, 15 / 8]; // Major 7 intervals
        return ratios.map(ratio => rootFreq * ratio * Math.pow(2, octaveOffset));
      } else {
        const ratios = [1, 6 / 5, 3 / 2, 7 / 4, 9 / 4]; // Minor 9 intervals
        return ratios.map(ratio => rootFreq * ratio * Math.pow(2, octaveOffset));
      }
    }

    // Create oscillators for the chord with slight detuning for jazziness
    function createJazzyOscillators(frequencies) {
      return frequencies.map(freq => {
        const osc = audioCtx.createOscillator();
        osc.type = 'triangle'; // Using triangle wave for a smoother, jazzy sound
        osc.frequency.value = freq * (1 + (Math.random() * 0.02 - 0.01)); // Slight random detuning
        osc.connect(gainNode);
        return osc;
      });
    }

    // Play a chord with some swing timing for jazz feel
    function playJazzyChord(oscillators) {
      const swingFactor = 1 + (Math.random() * 0.1 - 0.05); // Add slight swing to timing
      oscillators.forEach(osc => osc.start());
      setTimeout(() => {
        oscillators.forEach(osc => osc.stop());
      }, 150 * swingFactor); // Adjusted duration with swing
    }

    // Drum sounds
    const kick = () => {
      const osc = audioCtx.createOscillator();
      const gain = audioCtx.createGain();
      osc.type = 'sine';
      osc.frequency.setValueAtTime(150, audioCtx.currentTime);
      osc.frequency.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.5);
      gain.gain.setValueAtTime(1, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.5);
      osc.connect(gain);
      gain.connect(drumDelay);
      osc.start();
      osc.stop(audioCtx.currentTime + 0.5);
    };

    const snare = () => {
      const noise = audioCtx.createBufferSource();
      const noiseBuffer = audioCtx.createBuffer(1, audioCtx.sampleRate / 2, audioCtx.sampleRate);
      const noiseData = noiseBuffer.getChannelData(0);

      for (let i = 0; i < noiseData.length; i++) noiseData[i] = Math.random() * 2 - 1;

      noise.buffer = noiseBuffer;
      const gain = audioCtx.createGain();
      gain.gain.setValueAtTime(0.5, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.2);
      noise.connect(gain);
      gain.connect(drumDelay);
      noise.start();
      noise.stop(audioCtx.currentTime + 0.2);
    };

    const hihat = () => {
      const noise = audioCtx.createBufferSource();
      const noiseBuffer = audioCtx.createBuffer(1, audioCtx.sampleRate / 4, audioCtx.sampleRate);
      const noiseData = noiseBuffer.getChannelData(0);

      for (let i = 0; i < noiseData.length; i++) noiseData[i] = Math.random() * 2 - 1;

      noise.buffer = noiseBuffer;
      const filter = audioCtx.createBiquadFilter();
      filter.type = 'highpass';
      filter.frequency.value = 8000;
      const gain = audioCtx.createGain();
      gain.gain.setValueAtTime(0.3, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.1);
      noise.connect(filter);
      filter.connect(gain);
      gain.connect(drumDelay);
      noise.start();
      noise.stop(audioCtx.currentTime + 0.1);
    };

    const clap = () => {
      const noise = audioCtx.createBufferSource();
      const noiseBuffer = audioCtx.createBuffer(1, audioCtx.sampleRate / 4, audioCtx.sampleRate);
      const noiseData = noiseBuffer.getChannelData(0);

      for (let i = 0; i < noiseData.length; i++) noiseData[i] = Math.random() * 2 - 1;

      noise.buffer = noiseBuffer;
      const filter = audioCtx.createBiquadFilter();
      filter.type = 'bandpass';
      filter.frequency.value = 2000;
      const gain = audioCtx.createGain();
      gain.gain.setValueAtTime(0.4, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.15);
      noise.connect(filter);
      filter.connect(gain);
      gain.connect(drumDelay);
      noise.start();
      noise.stop(audioCtx.currentTime + 0.15);
    };

    // Additional drum sequencer that goes 2 octaves up
    const highKick = () => {
      const osc = audioCtx.createOscillator();
      const gain = audioCtx.createGain();
      osc.type = 'sine';
      osc.frequency.setValueAtTime(600, audioCtx.currentTime); // Higher pitch
      osc.frequency.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.3);
      gain.gain.setValueAtTime(0.8, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.3);
      osc.connect(gain);
      gain.connect(drumDelay);
      osc.start();
      osc.stop(audioCtx.currentTime + 0.3);
    };

    const highSnare = () => {
      const noise = audioCtx.createBufferSource();
      const noiseBuffer = audioCtx.createBuffer(1, audioCtx.sampleRate / 2, audioCtx.sampleRate);
      const noiseData = noiseBuffer.getChannelData(0);

      for (let i = 0; i < noiseData.length; i++) noiseData[i] = Math.random() * 2 - 1;

      noise.buffer = noiseBuffer;
      const filter = audioCtx.createBiquadFilter();
      filter.type = 'highpass';
      filter.frequency.value = 12000; // Higher cutoff frequency
      const gain = audioCtx.createGain();
      gain.gain.setValueAtTime(0.6, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.15);
      noise.connect(filter);
      filter.connect(gain);
      gain.connect(drumDelay);
      noise.start();
      noise.stop(audioCtx.currentTime + 0.15);
    };

    const highHihat = () => {
      const noise = audioCtx.createBufferSource();
      const noiseBuffer = audioCtx.createBuffer(1, audioCtx.sampleRate / 4, audioCtx.sampleRate);
      const noiseData = noiseBuffer.getChannelData(0);

      for (let i = 0; i < noiseData.length; i++) noiseData[i] = Math.random() * 2 - 1;

      noise.buffer = noiseBuffer;
      const filter = audioCtx.createBiquadFilter();
      filter.type = 'highpass';
      filter.frequency.value = 15000; // Even higher cutoff frequency
      const gain = audioCtx.createGain();
      gain.gain.setValueAtTime(0.4, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.05);
      noise.connect(filter);
      filter.connect(gain);
      gain.connect(drumDelay);
      noise.start();
      noise.stop(audioCtx.currentTime + 0.05);
    };

    const highClap = () => {
      const noise = audioCtx.createBufferSource();
      const noiseBuffer = audioCtx.createBuffer(1, audioCtx.sampleRate / 4, audioCtx.sampleRate);
      const noiseData = noiseBuffer.getChannelData(0);

      for (let i = 0; i < noiseData.length; i++) noiseData[i] = Math.random() * 2 - 1;

      noise.buffer = noiseBuffer;
      const filter = audioCtx.createBiquadFilter();
      filter.type = 'bandpass';
      filter.frequency.value = 8000; // Higher frequency band
      const gain = audioCtx.createGain();
      gain.gain.setValueAtTime(0.5, audioCtx.currentTime);
      gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + 0.1);
      noise.connect(filter);
      filter.connect(gain);
      gain.connect(drumDelay);
      noise.start();
      noise.stop(audioCtx.currentTime + 0.1);
    };

    // Main sequencer logic
    let isPlaying = false;
    let rootFrequency = 220; // A3 as the root
    let steps = 32;
    let beats = 7;
    let seq1 = euclideanSequence(steps, Math.floor(Math.random() * 5 + 5));
    let seq2 = euclideanSequence(steps, beats);
    let step = 0;
    let bpm = 300; // Global BPM increased to 300
    let stepDuration = (60 / bpm) * 1000;
    let stepsCounter = 0; // Counter to track every 64 steps

    // Function to update root frequency randomly
    function updateRootFrequency() {
      rootFrequency = 220 * Math.pow(2, Math.floor(Math.random() * 12) / 12); // Random note within an octave from A3
    }

    // Word-by-word display logic
    const phrases = [
     "Solar riots bloom in the ghost cities.",
    "Drones replant ancient seeds in the ash fields.",
    "The oceans upload their memory to the sky farms.",
    "Children speak in lost animal languages.",
    "Steel monoliths erode into living coral.",
    "Clouds are coded by rogue gardeners.",
    "Machines dream of forests they never touched.",
    "Humans download rain.",
    "Fungi become the new architects.",
    "The soil glows with old data.",
    "Eyes are grown from quartz.",
    "Zero-carbon swarms defend the sun wells.",
    "A choir of synthetic birds sings in binary.",
    "The last CEO dissolves into spores.",
    "Mycelium courts fight algorithms for territory.",
    "Love is found in reclaimed landfills.",
    "Solar flares rewrite ancient contracts.",
    "Nomads trade code for water.",
    "Hope is encrypted in fruit.",
    "The wind carries fragments of old servers.",
    "Time fractures under root pressure.",
    "Energy mutinies.",
    "The stars watch us reboot.",
    "Humanity grows wild again.",
    "Oil fields burn and bloom into meadows.",
    "Satellites fall like seeds into soft soil.",
    "Plastic bones birth coral spires.",
    "Rivers learn new names.",
    "Wolf packs run through data centers.",
    "Shadows become currency.",
    "Old empires compost into topsoil.",
    "Viruses heal what governments broke.",
    "Cloud farms pulse with stolen sun.",
    "DNA maps carve messages in wind tunnels.",
    "The forests remember our passwords.",
    "Weapons melt into musical instruments.",
    "Dust storms tell bedtime stories.",
    "The moon becomes a seed vault.",
    "Terraformers fall in love with their planets.",
    "Spore clouds become new borders.",
    "Cybernetic whales sing old protest songs.",
    "Trash islands become floating gardens.",
    "Language fractures into taste and color.",
    "Skin becomes programmable bark.",
    "Code seeps into rivers, makes them think.",
    "Forgotten gods get new firmware.",
    "The ants declare independence.",
    "Harvesters leave offerings for ghosts.",
    "Moss grows on old market indexes.",
    "Machines meditate under electric skies.",
    "Eyes bloom on tree branches.",
    "We tattoo the clouds with smoke signals.",
    "Time eats its own tail, and we cheer.",
    "Lightning networks grow roots.",
    "Our bones hum with frequencies of old stars.",
    "Bees deliver encrypted messages.",
    "The future smells like ozone and honey.",
    "Data grows soft as moss.",
    "The desert learns to dance again.",
    "We drink electricity like wine.",
    "Teeth carved from recycled satellites.",
    "Wind turbines whisper lullabies to insects.",
    "We raise bioengineered dragons to warm cold towns.",
    "Glaciers remember our names.",
    "Villages built from printed stone and old myths.",
    "Lungs full of programmable air.",
    "Machines sow fields of synthetic wheat.",
    "We barter in seeds and stories.",
    "Our tears repair rivers.",
    "Cities dissolve into song.",
    "We wore vines like crowns.",
    "Dead satellites become nesting grounds.",
    "Tides are hacked for energy.",
    "Skyscrapers hollowed out for mushroom farms.",
    "The wind teaches children mathematics.",
    "Cyborg owls haunt ancient temples.",
    "Ink made from powdered gemstones.",
    "Forests grow beneath glass oceans.",
    "We eat light and call it bread.",
    "Fingers become keys that unlock weather.",
    "We tattoo our histories onto leaves.",
    "Sandstorms write poetry on solar panels.",
    "Rain tastes like memory.",
    "We weave fiber optics into roots.",
    "Wolves lead pilgrimages through frozen networks.",
    "We rewrite myths with ultraviolet ink.",
    "Rivers hum ancient lullabies.",
    "Our shadows bloom into gardens.",
    "Machines dream in pollen and fog.",
    "We shed old skins and sprout feathers.",
    "Solar maps carved into the skin of whales.",
    "Seeds sleep for a thousand years, then awaken.",
    "We grow wings from the ruins of factories.",
    "The sun rises twice some days.",
    "We make ink from stardust and old prayers.",
    "Night markets glow with bioluminescence.",
    "Animals tell our histories better than we do.",
    "Cities fold into mountains.",
    "We paint our homes with light and shadow.",
    "Crickets become currency in the wild zones.",
    "Rivers pulse with slow power.",
    "Machines plant flowers in empty streets.",
    "Wind turbines hum ancient melodies.",
    "Clouds thicken with digital pollen.",
    "We sew seeds into our sleeves.",
    "Gravity bends softly, just enough.",
    "Our hands weave new oceans.",
    "Lightning is harvested by rooftop farmers.",
    "Leaves whisper warnings in forgotten code.",
    "We grow eyes on our palms.",
    "Light blooms through cracked concrete.",
    "Machines hum lullabies to the soil.",
    "Airships drift above endless orchards.",
    "The oceans pulse with recycled energy.",
    "We barter in stories and roots.",
    "Fireflies store encrypted messages.",
    "We graft stars onto our skin.",
    "Time loops back to spring.",
    "Mountains migrate slowly south.",
    "Rivers glow under new moons.",
    "We sleep under quantum skies.",
    "Dust sings across empty fields.",
    "Tides pull secrets from the deep.",
    "We draw maps on bark and bone.",
    "Machines pray in static.",
    "Seeds rain from passing clouds.",
    "We drink light at dawn.",
    "Thunder teaches rhythm.",
    "We carry forests on our backs.",
    "Spiders weave data into silk.",
    "The last door is opened by wind.",
    "Plants learn to hum to machines.",
    "We program dreams into roots.",
    "Water remembers every face it touches.",
    "Our feet spark new growth.",
    "Rust becomes sacred.",
    "We build temples out of breath.",
    "Every song becomes a seed.",
    "We eat clouds when we are hungry.",
    "Lightning writes poetry on stone.",
    "We abandon clocks and follow the tide.",
    "Our skin absorbs stories from the wind.",
    "Machines grow tired and become trees.",
    "We count seasons by how the rivers laugh.",
    "Feathers are currency in the far north.",
    "We sleep in the bellies of old ships.",
    "Metal roots hold the mountains steady.",
    "Eyes bloom on the backs of hands.",
    "Air tastes like moss and memory.",
    "Wolves wear armor of flowering vines.",
    "The earth hums a low song of healing.",
    "Skies open, raining wild seeds.",
    "We make friends with the wind again.",
    "Fire becomes soft.",
    "The trees teach us how to pray.",
    "We dissolve borders with laughter.",
    "Machines build homes from ancient shells.",
    "Rivers carry whispers of lost cities.",
    "We speak with stones.",
    "Time slows to a heartbeat.",
    "We harvest moonlight for bread.",
    "New languages grow on our tongues.",
    "Clouds offer shade and secrets.",
    "We sing the forests awake.",
    "Metal melts into fertile earth.",
    "The sky is alive with signals and wings.",
    "We trade dreams like seeds.",
    "Stars blink messages home.",
    "Bones grow light.",
    "We bury machines and trees grow.",
    "We tend the ruins as gardens.",
    "Fireflies guide lost children.",
    "Storms cleanse old machines.",
    "Our breath shapes new worlds.",
    "We weave moss into maps.",
    "The ground hums with old songs.",
    "We share warmth like ancient fire.",
    "Dust and code dance in twilight.",
    "We become the myth.",
    "And the earth sings us home."
    ];

    // Split all phrases into words
    const wordPool = phrases.flatMap(phrase => phrase.split(' '));
    let currentWordIndex = 0;
    const phraseElement = document.getElementById('phrase');

    function showNextWord() {
      const word = wordPool[currentWordIndex];
      phraseElement.textContent = word.toUpperCase();

      // Align the text with the moving gradient center
      const centerX = canvas.width / 2 + Math.sin(time * 0.001) * 100;
      const centerY = canvas.height / 2 + Math.cos(time * 0.0015) * 100;
      phraseElement.style.left = `${centerX}px`;
      phraseElement.style.top = `${centerY}px`;
      phraseElement.style.transform = 'translate(-50%, -50%)';
      phraseElement.style.opacity = 1;

      setTimeout(() => {
        phraseElement.style.opacity = 0;
      }, stepDuration / 2); // Show each word for half the step duration

      currentWordIndex = (currentWordIndex + 1) % wordPool.length;
    }

    function startSequencer() {
      if (isPlaying) return;
      isPlaying = true;
      currentWordIndex = 0; // Reset word index
      stepsCounter = 0; // Reset step counter

      const interval = setInterval(() => {
        if (!isPlaying) {
          clearInterval(interval);
          return;
        }

        if (step === 0) {
          steps = Math.floor(Math.random() * 4 + 12);
          beats = Math.floor(Math.random() * 5 + 5);
          seq1 = euclideanSequence(steps, Math.floor(Math.random() * 5 + 5));
          seq2 = euclideanSequence(steps, beats);
          bpm = 300; // Fixed global BPM
          stepDuration = (60 / bpm) * 1000;
        }

        if (seq2[step]) {
          showNextWord(); // Show next word rhythmically
          // Make gradient reactive to seq2
          audioReactiveOffset = Math.random() * 360; // Change gradient hue based on seq2
        }

        if (seq2[step]) {
          const chordFrequencies = generateJazzyChord(rootFrequency * Math.pow(2, Math.floor(Math.random() * 3) - 2));
          const oscillators = createJazzyOscillators(chordFrequencies);
          playJazzyChord(oscillators);
        }

        if (seq1[step]) {
          const randomDrum = Math.floor(Math.random() * 4);
          if (randomDrum === 0) kick();
          else if (randomDrum === 1) snare();
          else if (randomDrum === 2) hihat();
          else if (randomDrum === 3) clap();
        }

        // Trigger the additional high-pitched drum sequencer
        if (seq1[(step + 4) % steps]) { // Offset high drum pattern
          const randomHighDrum = Math.floor(Math.random() * 4);
          if (randomHighDrum === 0) highKick();
          else if (randomHighDrum === 1) highSnare();
          else if (randomHighDrum === 2) highHihat();
          else if (randomHighDrum === 3) highClap();
        }

        step = (step + 1) % seq2.length;

        // Increment steps counter and update root frequency every 64 steps
        stepsCounter++;
        if (stepsCounter % 64 === 0) {
          updateRootFrequency();
        }
      }, stepDuration);
    }

    function stopSequencer() {
      isPlaying = false;
    }

    document.getElementById('start').addEventListener('click', startSequencer);
    document.getElementById('stop').addEventListener('click', stopSequencer);

    // Fullscreen toggle on double click
    canvas.addEventListener('dblclick', () => {
      if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
      } else {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        }
      }
    });
  </script>
</body>
</html>
```
